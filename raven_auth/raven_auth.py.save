# Jupyter
from tornado import gen, web
from jupyterhub.handlers import BaseHandler
from jupyterhub.auth import Authenticator
from jupyterhub.utils import url_path_join
from traitlets import Unicode

# University of Cambridge Webauth
import raven

class RavenLoginHandler(BaseHandler):

    def get(self):

        url = self.a
        port = self.authenticator.port
        desc = self.authenticator.description

        # TODO: Consider requesting a redirect to "/raven" to finish doing the auth?
        redirect_uri = raven.Request(url="http://" + url_path_join(self.hub.server.base_url, 'raven'), desc=desc).__str__()

        self.log.info('ucam raven redirect: %r', redirect_uri)
        self.redirect(redirect_uri)

class RavenResponseHandler(BaseHandler):
    def get(self):
        # Do raven
        raven_response = self.get_argument("WLS-Response")
        r = raven.Response(raven_response)

        self.log.info('raven response: %r', r)

        crsid = r.principal

        # Do jupyter
        user = self.user_from_username(crsid)
        self.set_login_cookie(user)
        self.redirect(url_path_join(self.hub.server.base_url, 'home'))

class RavenAuthenticator(Authenticator):

    url = Unicode(
        config = True,
        help = "Base url for jupyterhub"
    )

    port = Unicode(
        config = True,
        help = "Port which Jupyterhub is listening on."
    )

    description = Unicode(
        config = True,
        help = "Description of the webservice being accessed."
    )

    def get_handlers(self, app):
        return [
            (r'/login', RavenLoginHandler),
            (r'/raven', RavenResponseHandler)
        ]

    def authenticate(self, *args):
        raise NoteImplementedError()
